from flask import (Flask, redirect, render_template, request, send_from_directory, url_for)
import requests
from azure.identity import DefaultAzureCredential
from azure.keyvault.secrets import SecretClient

app = Flask(__name__)

@app.route("/")
def index():
   return render_template("index.html")

@app.route("/demo")
def demo():
   return render_template("/demo/index.html")

@app.route("/imgdupe")
def imgdupe():
   return render_template("/imgdupedetect/index.html")

@app.route("/keys")
def keys():


@app.route("/dupe")
def dupe():
   strID = "nn-FtOW2w8zz7stJwwojIQ"
   strST = "YXcEaaKMLVnXEYTF1vSi7TOU1q4Edg"
   strURL = "https://www.reddit.com/api/v1/access_token"
   objClientAuth = (strID, strST)
   dictPostData = { "grant_type": "client_credentials" }
   dictHeader = { "User-Agent": "imgdupedetect v0.1 by orbut8888" }
   try:
      roReceived = requests.post(f"{strURL}", auth=objClientAuth, data=dictPostData, headers=dictHeader)
   except Exception as e:
      strWebOutput = f"Trouble with POST, review {e}"
      raise e
   strToken = roReceived.json()["access_token"]
   strTokenType = roReceived.json()["token_type"]

   if not strToken:
      strWebOutput = f"No token received"
   else:
      dictHeader["Authorization"] = f"{strTokenType} {strToken}"
      strURL = "https://oauth.reddit.com/r/P320/new"
      
      try:
         roReceived = requests.get(f"{strURL}", headers = dictHeader)
      except Exception as e:
         strWebOutput += f"Trouble with GET, review {e}"
         raise e

      dictJson = roReceived.json()
      strAfterURL = dictJson["data"]["after"]
      strWebOutput = f"<head><base href=\"https://www.reddit.com/\" target=\"_blank\"></head><body>"

      try:
         dictThreads = dictJson["data"]["children"]
         
         for dictSingle in dictThreads:
            strThreadTitle = dictSingle["data"]["title"]
            strThreadAuthor = dictSingle["data"]["author"]
            strThreadPermalink = dictSingle["data"]["permalink"]
            strThreadComments = dictSingle["data"]["num_comments"]
            strThreadURL = dictSingle["data"]["url"]
            strThreadMedia = dictSingle["data"]["media"]
            strThreadType = dictSingle["data"]["post_hint"]            
            strWebOutput += f"<font size=5><a href=\"{strThreadPermalink}\">{strThreadTitle}</a></font><br>"
            strWebOutput += f"<b>{strThreadAuthor}</b> - {strThreadComments} Comment(s) / Post Type - {strThreadType}<br><p>"
      except Exception as e:
         strWebOutput += f"Trouble with JSON, review {e}"
         raise e

   return strWebOutput

if __name__ == '__main__':
  app.run(debug=True)